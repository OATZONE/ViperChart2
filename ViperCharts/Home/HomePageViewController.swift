//
//  HomePageViewController.swift
//  ViperCharts
//
//  Created Ps on 31/5/2561 BE.
//  Copyright © 2561 Ps. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Charts


class HomePageViewController: UIViewController, HomePageViewProtocol,ChartViewDelegate {

	var presenter: HomePagePresenterProtocol?
    let parties = ["Party A", "Party B", "Party C", "Party D", "Party E", "Party F",
                   "Party G", "Party H", "Party I", "Party J", "Party K", "Party L",
                   "Party M", "Party N", "Party O", "Party P", "Party Q", "Party R",
                   "Party S", "Party T", "Party U", "Party V", "Party W", "Party X",
                   "Party Y", "Party Z"]
    @IBOutlet weak var pieChartView: PieChartView!
    @IBOutlet weak var pieChartView2: PieChartView!
    @IBOutlet weak var pieChartView3: PieChartView!
    @IBOutlet weak var btvalue1: UIButton!
    @IBOutlet weak var chartView: LineChartView!
    var someInts = [Double]()
    
    
  
	override func viewDidLoad() {
        super.viewDidLoad()
        pieChartView.delegate = self
        pieChartView.holeRadiusPercent = 0
        pieChartView.transparentCircleRadiusPercent = 1
        
        pieChartView2.delegate = self
        pieChartView2.holeRadiusPercent = 0
        pieChartView2.transparentCircleRadiusPercent = 1
        
        pieChartView3.delegate = self
        pieChartView3.holeRadiusPercent = 0
        pieChartView3.transparentCircleRadiusPercent = 1
        
        chartView.delegate = self
        chartView.chartDescription?.enabled = false
        chartView.dragEnabled = true
        chartView.setScaleEnabled(true)
        chartView.pinchZoomEnabled = true
        chartView.backgroundColor = UIColor( red: CGFloat(90/255.0), green: CGFloat(164/255.0), blue: CGFloat(154/255.0), alpha: CGFloat(1.0) )
        chartView.rightAxis.drawLabelsEnabled = false

          chartView.minOffset = 0
        // x bar
        chartView.xAxis.drawGridLinesEnabled = true
        chartView.xAxis.gridColor = UIColor.white
        chartView.xAxis.labelHeight = 0
        chartView.xAxis.drawLabelsEnabled = false
        chartView.xAxis.gridLineDashLengths = [5, 10]
       // chartView.xAxis.gridLineDashPhase
         chartView.chartDescription?.text="TEST"
         chartView.xAxis.gridLineDashLengths = [5, 500]
      
        
        // y Bar
        chartView.leftAxis.labelPosition =  YAxis.LabelPosition.insideChart
        chartView.leftAxis.yOffset = 10
        chartView.leftAxis.labelTextColor = UIColor.white
        chartView.leftAxis.gridColor = UIColor.white
      //  chartView.leftAxis.gridLineDashPhase = 10
        //chartView.leftAxis.gridLineDashPhase = 4
          //  chartView.leftAxis.axisMinimum = 3
        //     chartView.leftAxis.axisMaximum = 3
       chartView.leftAxis.axisRange = 40
    //chartView.leftAxis.spaceMin = 4
        
        
        
        
         let marker = BalloonMarker(color: UIColor( red: CGFloat(73/255.0), green: CGFloat(116/255.0), blue: CGFloat(110/255.0), alpha: CGFloat(1.0) ),
         font: .systemFont(ofSize: 14),
         textColor: .white,
         insets: UIEdgeInsets(top: 8, left: 8, bottom: 20, right: 8))
        
        
         marker.chartView = chartView
         marker.minimumSize = CGSize(width: 80, height: 40)
        chartView.marker = marker
        
        let marker2 = RadarMarkerView.viewFromXib()!
        marker2.chartView = chartView
       // chartView.marker = marker2
      
        
        
        useGeoTest(valueS: "oatzone")
        setPieChart()
    }
    func setPieChart (){
        let entries = (0..<3).map { (i) -> PieChartDataEntry in
            if (i == 1) {
                return PieChartDataEntry(value: 2,
                                         // label: parties[i % parties.count],
                                         icon: #imageLiteral(resourceName: "v1"))
            }
            if (i == 2) {
                return PieChartDataEntry(value: 2,
                                       //  label: parties[i % parties.count],
                                         icon: #imageLiteral(resourceName: "v2"))
            }else{
                return PieChartDataEntry(value: 6,
                                      //   label: parties[i % parties.count],
                                         icon: #imageLiteral(resourceName: "v3"))
            }
        }
        
        let entries2 = (0..<3).map { (i) -> PieChartDataEntry in
            if (i == 1) {
                return PieChartDataEntry(value: 2, label: "")
            }
            if (i == 2) {
                return PieChartDataEntry(value: 2, label: "")
            }else{
                return PieChartDataEntry(value: 6, label: "")
            }
        }
        
        let entries3 = (0..<3).map { (i) -> PieChartDataEntry in
            if (i == 1) {
                return PieChartDataEntry(value: 2, label: "20%")
            }
            if (i == 2) {
                return PieChartDataEntry(value: 2, label: "20%")
            }else{
                return PieChartDataEntry(value: 6, label: "60%")
            }
        }
        
        let set = PieChartDataSet(values: entries, label: "Election Results")
        set.drawValuesEnabled = false
        set.drawIconsEnabled = true
        set.iconsOffset = CGPoint(x: 0, y: 32)
        set.sliceSpace = 1
        set.colors = [UIColor.black.withAlphaComponent(0.4)]
        
        let set2 = PieChartDataSet(values: entries2, label: "Election Results")
        set2.drawValuesEnabled = false
        set2.sliceSpace = 1
        set2.valueLinePart1OffsetPercentage = 100
        set2.colors = ChartColorTemplates.vordiplom()
            + ChartColorTemplates.joyful()
            + ChartColorTemplates.colorful()
            + ChartColorTemplates.liberty()
            + ChartColorTemplates.pastel()
            + [UIColor(red: 51/255, green: 181/255, blue: 229/255, alpha: 1)]
        
        let set3 = PieChartDataSet(values: entries3, label: "Election Results")
        set3.drawValuesEnabled = false
        set3.sliceSpace = 1
        set3.colors = [UIColor.black.withAlphaComponent(0.7)]
        
        let data = PieChartData(dataSet: set)
        let data2 = PieChartData(dataSet: set2)
        let data3 = PieChartData(dataSet: set3)
        
        pieChartView.data = data2
        pieChartView2.data = data
        pieChartView3.data = data3
        pieChartView.highlightValues(nil)
        pieChartView.backgroundColor =  UIColor(red: 72/255, green: 81/255, blue: 85/255, alpha: 1)
    }
    func useGeoTest(valueS:  String) -> () {
        var lineChartEntry = [ChartDataEntry]()
        someInts = [18.123,18.456,18.456,18.567,19.2,19.812,19.293,18.120,19.23,15.42,13.353,19.55]
        for i in 0..<someInts.count {
            let value = ChartDataEntry(x: Double(i), y: Double(someInts[i]))
            lineChartEntry.append(value)
        }
        
        let gradientColors = [ChartColorTemplates.colorFromString("#2E5956").cgColor,
                              ChartColorTemplates.colorFromString("#599D86").cgColor]
        let gradient = CGGradient(colorsSpace: nil, colors: gradientColors as CFArray, locations: nil)!
        
        
      //  let leftAxis = chartView.leftAxis
      //  leftAxis.removeAllLimitLines()
      //  leftAxis.addLimitLine(ll1)
       // leftAxis.addLimitLine(ll2)
      //  leftAxis.axisMaximum = 200
      ////  leftAxis.axisMinimum = -50
      //  leftAxis.gridLineDashLengths = [5, 5]
        //leftAxis.drawLimitLinesBehindDataEnabled = true
       // leftAxis.gridColor = UIColor.white
       
        
        chartView.rightAxis.enabled = false
        
        
        let line1 = LineChartDataSet(values: lineChartEntry, label: "")
    line1.setColor(.white)
    // line1.valueTextColor = UIColor.white
        line1.setCircleColor(.white)
        line1.drawIconsEnabled = true
        line1.drawCircleHoleEnabled = false
        line1.drawFilledEnabled = true
        line1.drawCirclesEnabled = true
        line1.circleRadius = 2
        line1.drawValuesEnabled = false
   
        line1.valueFont = .systemFont(ofSize: 9)
        line1.formLineDashLengths = [5, 2.5]
        line1.formLineWidth = 1
        line1.formSize = 15
        line1.lineWidth = 1
        line1.fillAlpha = 0.6
        line1.fill = Fill(linearGradient: gradient, angle: 0) //.linearGradient(gradient, angle: 90)

     //   line1.highlightColor = UIColor(white: 1, alpha: 0)
       // line1.highlightColor = UIColor.white
        line1.highlightLineWidth = 0.5
    //    line1.highlightLineDashPhase = 10
      //  line1.highlightLineDashLengths = [-0,0]
      //  line1.highlightEnabled = true
        //line1.drawVerticalHighlightIndicatorEnabled = false
        

        
        
        let data = LineChartData()
        
        data.addDataSet(line1)
        
        chartView.data = data
        chartView.chartDescription?.text="TdfsdfdsfdfEST"
        //chartView.animate(xAxisDuration: 1.5)
        chartView.animate(yAxisDuration: 1.5)
        
    }
    @IBAction func btPaproom(_ sender: Any) {
        var lineChartEntry = [ChartDataEntry]()
        someInts = [10,15,12,14,34]
        for i in 0..<someInts.count {
            let value = ChartDataEntry(x: Double(i), y: Double(someInts[i]))
            lineChartEntry.append(value)
        }
        
        let gradientColors = [ChartColorTemplates.colorFromString("#2E5956").cgColor,
                              ChartColorTemplates.colorFromString("#599D86").cgColor]
        let gradient = CGGradient(colorsSpace: nil, colors: gradientColors as CFArray, locations: nil)!
        
        let line1 = LineChartDataSet(values: lineChartEntry, label: nil)
        line1.setCircleColor(.white)
        line1.drawIconsEnabled = true
        line1.drawCircleHoleEnabled = false
        line1.drawFilledEnabled = true
        line1.drawCirclesEnabled = true
        line1.circleRadius = 2
        line1.drawValuesEnabled = false
        
        line1.valueFont = .systemFont(ofSize: 9)
        line1.formLineDashLengths = [5, 2.5]
        line1.formLineWidth = 1
        line1.formSize = 15
        line1.lineWidth = 1
        line1.fillAlpha = 0.6
        line1.fill = Fill(linearGradient: gradient, angle: 0) //.linearGradient(gradient, angle: 90)
        
        //   line1.highlightColor = UIColor(white: 1, alpha: 0)
        line1.highlightColor = UIColor.white
        line1.highlightLineWidth = 0.5
        //    line1.highlightLineDashPhase = 10
        //  line1.highlightLineDashLengths = [-0,0]
        //  line1.highlightEnabled = true
        //line1.drawVerticalHighlightIndicatorEnabled = false
        
        let data = LineChartData()
        
        data.addDataSet(line1)
        
        chartView.data = data
        chartView.chartDescription?.text="TEST"
      
        //chartView.animate(xAxisDuration: 1.5)
        chartView.animate(yAxisDuration: 1.5)
    }
    
    @IBAction func btPanPon(_ sender: Any) {
        
        var lineChartEntry = [ChartDataEntry]()
        someInts = [23,4,14,24,7]
        for i in 0..<someInts.count {
            let value = ChartDataEntry(x: Double(i), y: Double(someInts[i]))
            lineChartEntry.append(value)
        }
        
        let gradientColors = [ChartColorTemplates.colorFromString("#2E5956").cgColor,
                              ChartColorTemplates.colorFromString("#599D86").cgColor]
        let gradient = CGGradient(colorsSpace: nil, colors: gradientColors as CFArray, locations: nil)!
        
        let line1 = LineChartDataSet(values: lineChartEntry, label: nil)
        line1.colors = [NSUIColor.white]
        line1.fillAlpha = 0.6
        line1.fill = Fill(linearGradient: gradient, angle: 0) //.linearGradient(gradient, angle: 90)
        line1.drawFilledEnabled = true
        line1.drawCirclesEnabled = false
        let data = LineChartData()
        
        data.addDataSet(line1)
        
        chartView.data = data
        chartView.chartDescription?.text="TEST"
        //chartView.animate(xAxisDuration: 1.5)
        chartView.animate(yAxisDuration: 1.5)
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
}
